import sys
sys.path.append('/project_ghent/Mostafa/image/compress_AI')
sys.path.append('/project_ghent/Mostafa/image/ImageTransmission/src/gen_comm')

from DistInference.general_utils import analyze_input, histogram_plotter
from compressai.entropy_models import EntropyBottleneck, GaussianConditional
from compressai.ans import BufferedRansEncoder, RansDecoder
from compressai.models import CompressionModel
from compressai.layers import (
    AttentionBlock,
    ResidualBlock,
    ResidualBlockUpsample,
    ResidualBlockWithStride,
    ResidualBlockWithLambdaFiLM,
    conv3x3,
    subpel_conv3x3,
)

import torch.nn as nn
import torch.nn.functional as F
from torch import Tensor
import torch

from einops import rearrange 
from einops.layers.torch import Rearrange

import numpy as np
import math

class DropPath(nn.Module):
    """Drop paths (Stochastic Depth) per sample  (when applied in main path of residual blocks).
    """
    def __init__(self, drop_prob: float = 0., scale_by_keep: bool = True):
        super(DropPath, self).__init__()
        self.drop_prob = drop_prob
        self.scale_by_keep = scale_by_keep

    def forward(self, x):
        return drop_path(x, self.drop_prob, self.training, self.scale_by_keep)

    def extra_repr(self):
        return f'drop_prob={round(self.drop_prob,3):0.3f}'

def trunc_normal_(tensor, mean=0., std=1., a=-2., b=2.):
    # type: (Tensor, float, float, float, float) -> Tensor
    r"""Fills the input Tensor with values drawn from a truncated
    normal distribution. The values are effectively drawn from the
    normal distribution :math:`\mathcal{N}(\text{mean}, \text{std}^2)`
    with values outside :math:`[a, b]` redrawn until they are within
    the bounds. The method used for generating the random values works
    best when :math:`a \leq \text{mean} \leq b`.

    NOTE: this impl is similar to the PyTorch trunc_normal_, the bounds [a, b] are
    applied while sampling the normal with mean/std applied, therefore a, b args
    should be adjusted to match the range of mean, std args.

    Args:
        tensor: an n-dimensional `torch.Tensor`
        mean: the mean of the normal distribution
        std: the standard deviation of the normal distribution
        a: the minimum cutoff value
        b: the maximum cutoff value
    Examples:
        >>> w = torch.empty(3, 5)
        >>> nn.init.trunc_normal_(w)
    """
    with torch.no_grad():
        return _trunc_normal_(tensor, mean, std, a, b)
def _trunc_normal_(tensor, mean, std, a, b):
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn("mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
                      "The distribution of values may be incorrect.",
                      stacklevel=2)

    # Values are generated by using a truncated uniform distribution and
    # then using the inverse CDF for the normal distribution.
    # Get upper and lower cdf values
    l = norm_cdf((a - mean) / std)
    u = norm_cdf((b - mean) / std)

    # Uniformly fill tensor with values from [l, u], then translate to
    # [2l-1, 2u-1].
    tensor.uniform_(2 * l - 1, 2 * u - 1)

    # Use inverse cdf transform for normal distribution to get truncated
    # standard normal
    tensor.erfinv_()

    # Transform to proper mean, std
    tensor.mul_(std * math.sqrt(2.))
    tensor.add_(mean)

    # Clamp to ensure it's in the proper range
    tensor.clamp_(min=a, max=b)
    return tensor
SCALES_MIN = 0.11
SCALES_MAX = 256
SCALES_LEVELS = 64
def conv1x1(in_ch: int, out_ch: int, stride: int = 1) -> nn.Module:
    """1x1 convolution."""
    return nn.Conv2d(in_ch, out_ch, kernel_size=1, stride=stride)

def get_scale_table(min=SCALES_MIN, max=SCALES_MAX, levels=SCALES_LEVELS):
    x = torch.exp(torch.linspace(math.log(min), math.log(max), levels))
    analyze_input(x)
    return x

def ste_round(x: Tensor) -> Tensor:
    return torch.round(x) - x.detach() + x

def find_named_module(module, query):
    """Helper function to find a named module. Returns a `nn.Module` or `None`

    Args:
        module (nn.Module): the root module
        query (str): the module name to find

    Returns:
        nn.Module or None
    """

    return next((m for n, m in module.named_modules() if n == query), None)

def find_named_buffer(module, query):
    """Helper function to find a named buffer. Returns a `torch.Tensor` or `None`

    Args:
        module (nn.Module): the root module
        query (str): the buffer name to find

    Returns:
        torch.Tensor or None
    """
    return next((b for n, b in module.named_buffers() if n == query), None)

def _update_registered_buffer(
    module,
    buffer_name,
    state_dict_key,
    state_dict,
    policy="resize_if_empty",
    dtype=torch.int,
):
    new_size = state_dict[state_dict_key].size()
    registered_buf = find_named_buffer(module, buffer_name)

    if policy in ("resize_if_empty", "resize"):
        if registered_buf is None:
            raise RuntimeError(f'buffer "{buffer_name}" was not registered')

        if policy == "resize" or registered_buf.numel() == 0:
            registered_buf.resize_(new_size)

    elif policy == "register":
        if registered_buf is not None:
            raise RuntimeError(f'buffer "{buffer_name}" was already registered')

        module.register_buffer(buffer_name, torch.empty(new_size, dtype=dtype).fill_(0))

    else:
        raise ValueError(f'Invalid policy "{policy}"')

def update_registered_buffers(
    module,
    module_name,
    buffer_names,
    state_dict,
    policy="resize_if_empty",
    dtype=torch.int,
):
    """Update the registered buffers in a module according to the tensors sized
    in a state_dict.

    (There's no way in torch to directly load a buffer with a dynamic size)

    Args:
        module (nn.Module): the module
        module_name (str): module name in the state dict
        buffer_names (list(str)): list of the buffer names to resize in the module
        state_dict (dict): the state dict
        policy (str): Update policy, choose from
            ('resize_if_empty', 'resize', 'register')
        dtype (dtype): Type of buffer to be registered (when policy is 'register')
    """
    if not module:
        return
    valid_buffer_names = [n for n, _ in module.named_buffers()]
    for buffer_name in buffer_names:
        if buffer_name not in valid_buffer_names:
            raise ValueError(f'Invalid buffer name "{buffer_name}"')

    for buffer_name in buffer_names:
        _update_registered_buffer(
            module,
            buffer_name,
            f"{module_name}.{buffer_name}", 
            state_dict,
            policy,
            dtype,
        )

def conv(in_channels, out_channels, kernel_size=5, stride=2):
    return nn.Conv2d(
        in_channels,
        out_channels,
        kernel_size=kernel_size,
        stride=stride,
        padding=kernel_size // 2,
    )

class WMSA(nn.Module):
    """ Self-attention module in Swin Transformer
    """

    def __init__(self, input_dim, output_dim, head_dim, window_size, type):
        super(WMSA, self).__init__()
        self.input_dim = input_dim
        self.output_dim = output_dim
        self.head_dim = head_dim 
        self.scale = self.head_dim ** -0.5
        self.n_heads = input_dim//head_dim
        self.window_size = window_size
        self.type=type
        self.embedding_layer = nn.Linear(self.input_dim, 3*self.input_dim, bias=True)
        self.relative_position_params = nn.Parameter(torch.zeros((2 * window_size - 1)*(2 * window_size -1), self.n_heads))

        self.linear = nn.Linear(self.input_dim, self.output_dim)

        trunc_normal_(self.relative_position_params, std=.02)
        self.relative_position_params = torch.nn.Parameter(self.relative_position_params.view(2*window_size-1, 2*window_size-1, self.n_heads).transpose(1,2).transpose(0,1))

    def generate_mask(self, h, w, p, shift):
        """ generating the mask of SW-MSA
        Args:
            shift: shift parameters in CyclicShift.
        Returns:
            attn_mask: should be (1 1 w p p),
        """
        attn_mask = torch.zeros(h, w, p, p, p, p, dtype=torch.bool, device=self.relative_position_params.device)
        if self.type == 'W':
            return attn_mask

        s = p - shift
        attn_mask[-1, :, :s, :, s:, :] = True
        attn_mask[-1, :, s:, :, :s, :] = True
        attn_mask[:, -1, :, :s, :, s:] = True
        attn_mask[:, -1, :, s:, :, :s] = True
        attn_mask = rearrange(attn_mask, 'w1 w2 p1 p2 p3 p4 -> 1 1 (w1 w2) (p1 p2) (p3 p4)')
        return attn_mask

    def forward(self, x):
        """ Forward pass of Window Multi-head Self-attention module.
        Args:
            x: input tensor with shape of [b h w c];
            attn_mask: attention mask, fill -inf where the value is True; 
        Returns:
            output: tensor shape [b h w c]
        """
        if self.type!='W': x = torch.roll(x, shifts=(-(self.window_size//2), -(self.window_size//2)), dims=(1,2))
        x = rearrange(x, 'b (w1 p1) (w2 p2) c -> b w1 w2 p1 p2 c', p1=self.window_size, p2=self.window_size)
        h_windows = x.size(1)
        w_windows = x.size(2)
        x = rearrange(x, 'b w1 w2 p1 p2 c -> b (w1 w2) (p1 p2) c', p1=self.window_size, p2=self.window_size)
        qkv = self.embedding_layer(x)
        q, k, v = rearrange(qkv, 'b nw np (threeh c) -> threeh b nw np c', c=self.head_dim).chunk(3, dim=0)
        sim = torch.einsum('hbwpc,hbwqc->hbwpq', q, k) * self.scale
        sim = sim + rearrange(self.relative_embedding(), 'h p q -> h 1 1 p q')
        if self.type != 'W':
            attn_mask = self.generate_mask(h_windows, w_windows, self.window_size, shift=self.window_size//2)
            sim = sim.masked_fill_(attn_mask, float("-inf"))

        probs = nn.functional.softmax(sim, dim=-1)
        output = torch.einsum('hbwij,hbwjc->hbwic', probs, v)
        output = rearrange(output, 'h b w p c -> b w p (h c)')
        output = self.linear(output)
        output = rearrange(output, 'b (w1 w2) (p1 p2) c -> b (w1 p1) (w2 p2) c', w1=h_windows, p1=self.window_size)

        if self.type!='W': output = torch.roll(output, shifts=(self.window_size//2, self.window_size//2), dims=(1,2))
        return output

    def relative_embedding(self):
        cord = torch.tensor(np.array([[i, j] for i in range(self.window_size) for j in range(self.window_size)]))
        relation = cord[:, None, :] - cord[None, :, :] + self.window_size -1
        return self.relative_position_params[:, relation[:,:,0].long(), relation[:,:,1].long()]

class Block(nn.Module):
    def __init__(self, input_dim, output_dim, head_dim, window_size, drop_path, type='W', input_resolution=None):
        """ SwinTransformer Block
        """
        super(Block, self).__init__()
        self.input_dim = input_dim
        self.output_dim = output_dim
        assert type in ['W', 'SW']
        self.type = type
        self.ln1 = nn.LayerNorm(input_dim)
        self.msa = WMSA(input_dim, input_dim, head_dim, window_size, self.type)
        self.drop_path = DropPath(drop_path) if drop_path > 0. else nn.Identity()
        self.ln2 = nn.LayerNorm(input_dim)
        self.mlp = nn.Sequential(
            nn.Linear(input_dim, 4 * input_dim),
            nn.GELU(),
            nn.Linear(4 * input_dim, output_dim),
        )

    def forward(self, x):
        x = x + self.drop_path(self.msa(self.ln1(x)))
        x = x + self.drop_path(self.mlp(self.ln2(x)))
        return x

class ConvTransBlock(nn.Module):
    def __init__(self, conv_dim, trans_dim, head_dim, window_size, drop_path, type='W'):
        """ SwinTransformer and Conv Block
        """
        super(ConvTransBlock, self).__init__()
        self.conv_dim = conv_dim
        self.trans_dim = trans_dim
        self.head_dim = head_dim
        self.window_size = window_size
        self.drop_path = drop_path
        self.type = type
        assert self.type in ['W', 'SW']
        self.trans_block = Block(self.trans_dim, self.trans_dim, self.head_dim, self.window_size, self.drop_path, self.type)
        self.conv1_1 = nn.Conv2d(self.conv_dim+self.trans_dim, self.conv_dim+self.trans_dim, 1, 1, 0, bias=True)
        self.conv1_2 = nn.Conv2d(self.conv_dim+self.trans_dim, self.conv_dim+self.trans_dim, 1, 1, 0, bias=True)

        self.conv_block = ResidualBlock(self.conv_dim, self.conv_dim)

    def forward(self, x):
        conv_x, trans_x = torch.split(self.conv1_1(x), (self.conv_dim, self.trans_dim), dim=1)
        conv_x = self.conv_block(conv_x) + conv_x
        trans_x = Rearrange('b c h w -> b h w c')(trans_x)
        trans_x = self.trans_block(trans_x)
        trans_x = Rearrange('b h w c -> b c h w')(trans_x)
        res = self.conv1_2(torch.cat((conv_x, trans_x), dim=1))
        x = x + res
        return x

class SWAtten(AttentionBlock):
    def __init__(self, input_dim, output_dim, head_dim, window_size, drop_path, inter_dim=192) -> None:
        if inter_dim is not None:
            super().__init__(N=inter_dim)
            self.non_local_block = SwinBlock(inter_dim, inter_dim, head_dim, window_size, drop_path)
        else:
            super().__init__(N=input_dim)
            self.non_local_block = SwinBlock(input_dim, input_dim, head_dim, window_size, drop_path)
        if inter_dim is not None:
            self.in_conv = conv1x1(input_dim, inter_dim)
            self.out_conv = conv1x1(inter_dim, output_dim)

    def forward(self, x):
        x = self.in_conv(x)
        identity = x
        z = self.non_local_block(x)
        a = self.conv_a(x)
        b = self.conv_b(z)
        out = a * torch.sigmoid(b)
        out += identity
        out = self.out_conv(out)
        return out

class SwinBlock(nn.Module):
    def __init__(self, input_dim, output_dim, head_dim, window_size, drop_path) -> None:
        super().__init__()
        self.block_1 = Block(input_dim, output_dim, head_dim, window_size, drop_path, type='W')
        self.block_2 = Block(input_dim, output_dim, head_dim, window_size, drop_path, type='SW')
        self.window_size = window_size

    def forward(self, x):
        resize = False
        if (x.size(-1) <= self.window_size) or (x.size(-2) <= self.window_size):
            padding_row = (self.window_size - x.size(-2)) // 2
            padding_col = (self.window_size - x.size(-1)) // 2
            x = F.pad(x, (padding_col, padding_col+1, padding_row, padding_row+1))
        trans_x = Rearrange('b c h w -> b h w c')(x)
        trans_x = self.block_1(trans_x)
        trans_x =  self.block_2(trans_x)
        trans_x = Rearrange('b h w c -> b c h w')(trans_x)
        if resize:
            x = F.pad(x, (-padding_col, -padding_col-1, -padding_row, -padding_row-1))
        return trans_x

class TCM(CompressionModel):
    def __init__(self, config=[2, 2, 2, 2, 2, 2], head_dim=[8, 16, 32, 32, 16, 8], drop_path_rate=0, N=128,  M=320, num_slices=5, max_support_slices=5, **kwargs):
        super().__init__(entropy_bottleneck_channels=N)
        self.config = config
        self.head_dim = head_dim
        self.window_size = 8
        self.num_slices = num_slices
        self.max_support_slices = max_support_slices
        dim = N
        self.M = M
        dpr = [x.item() for x in torch.linspace(0, drop_path_rate, sum(config))]
        begin = 0

        self.m_down1 = [ConvTransBlock(dim, dim, self.head_dim[0], self.window_size, dpr[i+begin], 'W' if not i%2 else 'SW') 
                      for i in range(config[0])] + \
                      [ResidualBlockWithStride(2*N, 2*N, stride=2)]
        self.m_down2 = [ConvTransBlock(dim, dim, self.head_dim[1], self.window_size, dpr[i+begin], 'W' if not i%2 else 'SW')
                      for i in range(config[1])] + \
                      [ResidualBlockWithStride(2*N, 2*N, stride=2)]
        self.m_down3 = [ConvTransBlock(dim, dim, self.head_dim[2], self.window_size, dpr[i+begin], 'W' if not i%2 else 'SW')
                      for i in range(config[2])] + \
                      [conv3x3(2*N, M, stride=2)]

        self.m_up1 = [ConvTransBlock(dim, dim, self.head_dim[3], self.window_size, dpr[i+begin], 'W' if not i%2 else 'SW') 
                      for i in range(config[3])] + \
                      [ResidualBlockUpsample(2*N, 2*N, 2)]
        self.m_up2 = [ConvTransBlock(dim, dim, self.head_dim[4], self.window_size, dpr[i+begin], 'W' if not i%2 else 'SW') 
                      for i in range(config[4])] + \
                      [ResidualBlockUpsample(2*N, 2*N, 2)]
        self.m_up3 = [ConvTransBlock(dim, dim, self.head_dim[5], self.window_size, dpr[i+begin], 'W' if not i%2 else 'SW') 
                      for i in range(config[5])] + \
                      [subpel_conv3x3(2*N, 3, 2)]
        
        self.g_a = nn.Sequential(*[ResidualBlockWithStride(3, 2*N, 2)] + self.m_down1 + self.m_down2 + self.m_down3)
        

        self.g_s = nn.Sequential(*[ResidualBlockUpsample(M, 2*N, 2)] + self.m_up1 + self.m_up2 + self.m_up3)

        self.ha_down1 = [ConvTransBlock(N, N, 32, 4, 0, 'W' if not i%2 else 'SW') 
                      for i in range(config[0])] + \
                      [conv3x3(2*N, 192, stride=2)]

        self.h_a = nn.Sequential(
            *[ResidualBlockWithStride(320, 2*N, 2)] + \
            self.ha_down1
        )

        self.hs_up1 = [ConvTransBlock(N, N, 32, 4, 0, 'W' if not i%2 else 'SW') 
                      for i in range(config[3])] + \
                      [subpel_conv3x3(2*N, 320, 2)]

        self.h_mean_s = nn.Sequential(
            *[ResidualBlockUpsample(192, 2*N, 2)] + \
            self.hs_up1
        )

        self.hs_up2 = [ConvTransBlock(N, N, 32, 4, 0, 'W' if not i%2 else 'SW') 
                      for i in range(config[3])] + \
                      [subpel_conv3x3(2*N, 320, 2)]


        self.h_scale_s = nn.Sequential(
            *[ResidualBlockUpsample(192, 2*N, 2)] + \
            self.hs_up2
        )


        self.atten_mean = nn.ModuleList(
            nn.Sequential(
                SWAtten((320 + (320//self.num_slices)*min(i, 5)), (320 + (320//self.num_slices)*min(i, 5)), 16, self.window_size,0, inter_dim=128)
            ) for i in range(self.num_slices)
            )
        self.atten_scale = nn.ModuleList(
            nn.Sequential(
                SWAtten((320 + (320//self.num_slices)*min(i, 5)), (320 + (320//self.num_slices)*min(i, 5)), 16, self.window_size,0, inter_dim=128)
            ) for i in range(self.num_slices)
            )
        self.cc_mean_transforms = nn.ModuleList(
            nn.Sequential(
                conv(320 + (320//self.num_slices)*min(i, 5), 224, stride=1, kernel_size=3),
                nn.GELU(),
                conv(224, 128, stride=1, kernel_size=3),
                nn.GELU(),
                conv(128, (320//self.num_slices), stride=1, kernel_size=3),
            ) for i in range(self.num_slices)
        )
        self.cc_scale_transforms = nn.ModuleList(
            nn.Sequential(
                conv(320 + (320//self.num_slices)*min(i, 5), 224, stride=1, kernel_size=3),
                nn.GELU(),
                conv(224, 128, stride=1, kernel_size=3),
                nn.GELU(),
                conv(128, (320//self.num_slices), stride=1, kernel_size=3),
            ) for i in range(self.num_slices)
            )

        self.lrp_transforms = nn.ModuleList(
            nn.Sequential(
                conv(320 + (320//self.num_slices)*min(i+1, 6), 224, stride=1, kernel_size=3),
                nn.GELU(),
                conv(224, 128, stride=1, kernel_size=3),
                nn.GELU(),
                conv(128, (320//self.num_slices), stride=1, kernel_size=3),
            ) for i in range(self.num_slices)
        )

        self.entropy_bottleneck = EntropyBottleneck(192)
        self.gaussian_conditional = GaussianConditional(None)
        self.decoder = RansDecoder()

    def update(self, scale_table=None, force=False):
        if scale_table is None:
            scale_table = get_scale_table()
        updated = self.gaussian_conditional.update_scale_table(scale_table, force=force)
        updated |= super().update(force=force)
        return updated
    
    def forward(self, x):
        y = self.g_a(x)
        y_shape = y.shape[2:]
        z = self.h_a(y)
        _, z_likelihoods = self.entropy_bottleneck(z)

        z_offset = self.entropy_bottleneck._get_medians()
        z_tmp = z - z_offset
        z_hat = ste_round(z_tmp) + z_offset

        latent_scales = self.h_scale_s(z_hat)
        latent_means = self.h_mean_s(z_hat)

        y_slices = y.chunk(self.num_slices, 1)
        y_hat_slices = []
        y_likelihood = []
        mu_list = []
        scale_list = []
        for slice_index, y_slice in enumerate(y_slices):
            support_slices = (y_hat_slices if self.max_support_slices < 0 else y_hat_slices[:self.max_support_slices])
            mean_support = torch.cat([latent_means] + support_slices, dim=1)
            mean_support = self.atten_mean[slice_index](mean_support)
            mu = self.cc_mean_transforms[slice_index](mean_support)
            mu = mu[:, :, :y_shape[0], :y_shape[1]]
            mu_list.append(mu)
            scale_support = torch.cat([latent_scales] + support_slices, dim=1)
            scale_support = self.atten_scale[slice_index](scale_support)
            scale = self.cc_scale_transforms[slice_index](scale_support)
            scale = scale[:, :, :y_shape[0], :y_shape[1]]
            scale_list.append(scale)
            _, y_slice_likelihood = self.gaussian_conditional(y_slice, scale, mu)
            y_likelihood.append(y_slice_likelihood)
            y_hat_slice = ste_round(y_slice - mu) + mu
            # if self.training:
            #     lrp_support = torch.cat([mean_support + torch.randn(mean_support.size()).cuda().mul(scale_support), y_hat_slice], dim=1)
            # else:
            lrp_support = torch.cat([mean_support, y_hat_slice], dim=1)
            lrp = self.lrp_transforms[slice_index](lrp_support)
            lrp = 0.5 * torch.tanh(lrp)
            y_hat_slice += lrp
            y_hat_slices.append(y_hat_slice)

        y_hat = torch.cat(y_hat_slices, dim=1)
        means = torch.cat(mu_list, dim=1)
        scales = torch.cat(scale_list, dim=1)
        y_likelihoods = torch.cat(y_likelihood, dim=1)
        x_hat = self.g_s(y_hat)

        return {
            "x_hat": x_hat,
            "likelihoods": {"y": y_likelihoods, "z": z_likelihoods},
            "para":{"means": means, "scales":scales, "y":y}
        }

    def load_state_dict(self, state_dict):
        update_registered_buffers(
            self.gaussian_conditional,
            "gaussian_conditional",
            ["_quantized_cdf", "_offset", "_cdf_length", "scale_table"],
            state_dict,
        )
        super().load_state_dict(state_dict)

    @classmethod
    def from_state_dict(cls, state_dict):
        """Return a new model instance from `state_dict`."""
        N = state_dict["g_a.0.weight"].size(0)
        M = state_dict["g_a.6.weight"].size(0)
        # net = cls(N, M)
        net = cls(N, M)
        net.load_state_dict(state_dict)
        return net

    def compress(self, x, prune_indices=None, y_black=None):
        y = self.g_a(x)


        y_shape = y.shape[2:]
        z = self.h_a(y)

        # y[:, prune_indices, ...] = 0 if prune_indices is not None else y
        # y = y[:, [i for i in range(y.size(1)) if i not in prune_indices], ...] if prune_indices is not None else y
        # y[:, prune_indices, ...] = y_black[:, prune_indices, ...] if prune_indices is not None else y
        # y[:, prune_indices, ...] = y[:, [-1], ...].expand(-1, len(prune_indices), -1, -1) if prune_indices is not None else y

        z_strings = self.entropy_bottleneck.compress(z)
        # print(f"latent compressed ={len(z_strings[0])}")
        z_hat = self.entropy_bottleneck.decompress(z_strings, z.size()[-2:])

        latent_scales = self.h_scale_s(z_hat)
        latent_means = self.h_mean_s(z_hat)

        y_slices = y.chunk(self.num_slices, 1)
        y_hat_slices = []
        y_scales = []
        y_means = []

        cdf = self.gaussian_conditional.quantized_cdf.tolist()
        cdf_lengths = self.gaussian_conditional.cdf_length.reshape(-1).int().tolist()
        offsets = self.gaussian_conditional.offset.reshape(-1).int().tolist()

        encoder = BufferedRansEncoder()
        symbols_list = []
        indexes_list = []
        y_strings = []

        for slice_index, y_slice in enumerate(y_slices):
            support_slices = (y_hat_slices if self.max_support_slices < 0 else y_hat_slices[:self.max_support_slices])

            mean_support = torch.cat([latent_means] + support_slices, dim=1)
            mean_support = self.atten_mean[slice_index](mean_support)
            mu = self.cc_mean_transforms[slice_index](mean_support)
            mu = mu[:, :, :y_shape[0], :y_shape[1]]

            scale_support = torch.cat([latent_scales] + support_slices, dim=1)
            scale_support = self.atten_scale[slice_index](scale_support)
            scale = self.cc_scale_transforms[slice_index](scale_support)
            scale = scale[:, :, :y_shape[0], :y_shape[1]]

            index = self.gaussian_conditional.build_indexes(scale)
            y_q_slice = self.gaussian_conditional.quantize(y_slice, "symbols", mu)
            y_hat_slice = y_q_slice + mu

            symbols_list.extend(y_q_slice.reshape(-1).tolist())
            indexes_list.extend(index.reshape(-1).tolist())


            lrp_support = torch.cat([mean_support, y_hat_slice], dim=1)
            lrp = self.lrp_transforms[slice_index](lrp_support)
            lrp = 0.5 * torch.tanh(lrp)
            y_hat_slice += lrp

            y_hat_slices.append(y_hat_slice)
            y_scales.append(scale)
            y_means.append(mu)

        encoder.encode_with_indexes(symbols_list, indexes_list, cdf, cdf_lengths, offsets)
        y_string = encoder.flush()
        y_strings.append(y_string)

        return {"strings": [y_strings, z_strings], "shape": z.size()[-2:]}

    def compress_mask(self, x, p=None, y_black=None):
        y = self.g_a(x)
        num_channels_to_keep = int(p * y.shape[1])
        y[:, num_channels_to_keep:, :, :] = 0.0


        y_shape = y.shape[2:]
        z = self.h_a(y)

        num_channels_to_keep = int(p * z.shape[1])
        z[:, num_channels_to_keep:, :, :] = 0.0

        z_strings = self.entropy_bottleneck.compress(z)
        # print(f"latent compressed ={len(z_strings[0])}")
        z_hat = self.entropy_bottleneck.decompress(z_strings, z.size()[-2:])

        latent_scales = self.h_scale_s(z_hat)
        latent_means = self.h_mean_s(z_hat)

        y_slices = y.chunk(self.num_slices, 1)
        y_hat_slices = []
        y_scales = []
        y_means = []

        cdf = self.gaussian_conditional.quantized_cdf.tolist()
        cdf_lengths = self.gaussian_conditional.cdf_length.reshape(-1).int().tolist()
        offsets = self.gaussian_conditional.offset.reshape(-1).int().tolist()

        encoder = BufferedRansEncoder()
        symbols_list = []
        indexes_list = []
        y_strings = []

        for slice_index, y_slice in enumerate(y_slices):
            support_slices = (y_hat_slices if self.max_support_slices < 0 else y_hat_slices[:self.max_support_slices])

            mean_support = torch.cat([latent_means] + support_slices, dim=1)
            mean_support = self.atten_mean[slice_index](mean_support)
            mu = self.cc_mean_transforms[slice_index](mean_support)
            mu = mu[:, :, :y_shape[0], :y_shape[1]]

            scale_support = torch.cat([latent_scales] + support_slices, dim=1)
            scale_support = self.atten_scale[slice_index](scale_support)
            scale = self.cc_scale_transforms[slice_index](scale_support)
            scale = scale[:, :, :y_shape[0], :y_shape[1]]

            index = self.gaussian_conditional.build_indexes(scale)
            y_q_slice = self.gaussian_conditional.quantize(y_slice, "symbols", mu)
            y_hat_slice = y_q_slice + mu

            symbols_list.extend(y_q_slice.reshape(-1).tolist())
            indexes_list.extend(index.reshape(-1).tolist())


            lrp_support = torch.cat([mean_support, y_hat_slice], dim=1)
            lrp = self.lrp_transforms[slice_index](lrp_support)
            lrp = 0.5 * torch.tanh(lrp)
            y_hat_slice += lrp

            y_hat_slices.append(y_hat_slice)
            y_scales.append(scale)
            y_means.append(mu)

        encoder.encode_with_indexes(symbols_list, indexes_list, cdf, cdf_lengths, offsets)
        y_string = encoder.flush()
        y_strings.append(y_string)

        return {"strings": [y_strings, z_strings], "shape": z.size()[-2:]}

    def decompress_mask(self, strings, shape):
        z_hat = self.entropy_bottleneck.decompress(strings[1], shape)
        latent_scales = self.h_scale_s(z_hat)
        latent_means = self.h_mean_s(z_hat)

        y_shape = [z_hat.shape[2] * 4, z_hat.shape[3] * 4]

        y_string = strings[0][0]

        y_hat_slices = []
        cdf = self.gaussian_conditional.quantized_cdf.tolist()
        cdf_lengths = self.gaussian_conditional.cdf_length.reshape(-1).int().tolist()
        offsets = self.gaussian_conditional.offset.reshape(-1).int().tolist()
        self.decoder.set_stream(y_string)
        for slice_index in range(self.num_slices):
            support_slices = (y_hat_slices if self.max_support_slices < 0 else y_hat_slices[:self.max_support_slices])
            mean_support = torch.cat([latent_means] + support_slices, dim=1)
            mean_support = self.atten_mean[slice_index](mean_support)
            
            mu = self.cc_mean_transforms[slice_index](mean_support)
            mu = mu[:, :, :y_shape[0], :y_shape[1]]

            scale_support = torch.cat([latent_scales] + support_slices, dim=1)
            scale_support = self.atten_scale[slice_index](scale_support)
            
            scale = self.cc_scale_transforms[slice_index](scale_support)
            scale = scale[:, :, :y_shape[0], :y_shape[1]]


            index = self.gaussian_conditional.build_indexes(scale)
                
            rv = self.decoder.decode_stream(index.reshape(-1).tolist(), cdf, cdf_lengths, offsets)
            rv = torch.Tensor(rv).reshape(1, -1, y_shape[0], y_shape[1])
            # analyze_input(rv, 'rv')

            if slice_index>0:
                # analyze_input(torch.tensor(rv).detach())
                # visualize_outside_range(rv.detach(), -100, 100, 0, 0) 
                rv = replace_outside_range_with_average(rv, -100, 100)
                # visualize_outside_range(rv.detach(), -100, 100, 0, 0) 
            
            y_hat_slice = self.gaussian_conditional.dequantize(rv, mu)

            lrp_support = torch.cat([mean_support, y_hat_slice], dim=1)
            lrp = self.lrp_transforms[slice_index](lrp_support)
            lrp = 0.5 * torch.tanh(lrp)
            y_hat_slice += lrp

            y_hat_slices.append(y_hat_slice)
            # y_hat_slice = replace_outside_range_with_average(y_hat_slice, -100, 100)

        
        y_hat = torch.cat(y_hat_slices, dim=1)
        x_hat = self.g_s(y_hat).clamp_(0, 1)
        

        return x_hat
        
    def compress_zlib(self, x):
        y = self.g_a(x)
        y_shape = y.shape[2:]

        z = self.h_a(y)
        # print(f"latent z ={z.shape}")
        z_strings = self.entropy_bottleneck.compress(z)
        # print(f"latent compressed ={len(z_strings[0])}")
        z_hat = self.entropy_bottleneck.decompress(z_strings, z.size()[-2:])

        latent_scales = self.h_scale_s(z_hat)
        latent_means = self.h_mean_s(z_hat)

        y_slices = y.chunk(self.num_slices, 1)
        y_hat_slices = []
        y_scales = []
        y_means = []

        cdf = self.gaussian_conditional.quantized_cdf.tolist()
        cdf_lengths = self.gaussian_conditional.cdf_length.reshape(-1).int().tolist()
        offsets = self.gaussian_conditional.offset.reshape(-1).int().tolist()

        encoder = BufferedRansEncoder()
        symbols_list = []
        indexes_list = []
        y_strings = []

        for slice_index, y_slice in enumerate(y_slices):
            support_slices = (y_hat_slices if self.max_support_slices < 0 else y_hat_slices[:self.max_support_slices])

            mean_support = torch.cat([latent_means] + support_slices, dim=1)
            mean_support = self.atten_mean[slice_index](mean_support)
            mu = self.cc_mean_transforms[slice_index](mean_support)
            mu = mu[:, :, :y_shape[0], :y_shape[1]]

            scale_support = torch.cat([latent_scales] + support_slices, dim=1)
            scale_support = self.atten_scale[slice_index](scale_support)
            scale = self.cc_scale_transforms[slice_index](scale_support)
            scale = scale[:, :, :y_shape[0], :y_shape[1]]

            index = self.gaussian_conditional.build_indexes(scale)
            y_q_slice = self.gaussian_conditional.quantize(y_slice, "symbols", mu)
            y_hat_slice = y_q_slice + mu

            symbols_list.extend(y_q_slice.reshape(-1).tolist())
            indexes_list.extend(index.reshape(-1).tolist())


            lrp_support = torch.cat([mean_support, y_hat_slice], dim=1)
            lrp = self.lrp_transforms[slice_index](lrp_support)
            lrp = 0.5 * torch.tanh(lrp)
            y_hat_slice += lrp

            y_hat_slices.append(y_hat_slice)
            y_scales.append(scale)
            y_means.append(mu)
        
        # print(f"index at encoder={indexes_list[:10]}")
        encoder.encode_with_indexes(symbols_list, indexes_list, cdf, cdf_lengths, offsets)
        y_string = encoder.flush()
        y_strings.append(y_string)

        return {"strings": [y_strings, z_strings], "shape": z.size()[-2:]}

    def _likelihood(self, inputs, scales, means=None):
        half = float(0.5)
        if means is not None:
            values = inputs - means
        else:
            values = inputs

        scales = torch.max(scales, torch.tensor(0.11))
        values = torch.abs(values)
        upper = self._standardized_cumulative((half - values) / scales)
        lower = self._standardized_cumulative((-half - values) / scales)
        likelihood = upper - lower
        return likelihood

    def _standardized_cumulative(self, inputs):
        half = float(0.5)
        const = float(-(2 ** -0.5))
        # Using the complementary error function maximizes numerical precision.
        return half * torch.erfc(const * inputs)

    # def decompress(self, strings, shape):
    #     z_hat = self.entropy_bottleneck.decompress(strings[1], shape)
    #     print('z_hat stats - min:', z_hat.min().item(), 'max:', z_hat.max().item(), 'mean:', z_hat.mean().item())
    
    #     latent_scales = self.h_scale_s(z_hat)
    #     print('latent_scales stats - min:', latent_scales.min().item(), 'max:', latent_scales.max().item(), 'mean:', latent_scales.mean().item())
    
    #     latent_means = self.h_mean_s(z_hat)
    #     print('latent_means stats - min:', latent_means.min().item(), 'max:', latent_means.max().item(), 'mean:', latent_means.mean().item())
    
    #     y_shape = [z_hat.shape[2] * 4, z_hat.shape[3] * 4]
    #     print('y_shape:', y_shape)
    
    #     y_string = strings[0][0]
    
    #     y_hat_slices = []
    #     cdf = self.gaussian_conditional.quantized_cdf.tolist()
    #     cdf_lengths = self.gaussian_conditional.cdf_length.reshape(-1).int().tolist()
    #     offsets = self.gaussian_conditional.offset.reshape(-1).int().tolist()
    
    #     decoder = RansDecoder()
    #     decoder.set_stream(y_string)
    
    #     for slice_index in range(self.num_slices):
    #         print(f'\nProcessing slice {slice_index}')
    
    #         support_slices = (
    #             y_hat_slices
    #             if self.max_support_slices < 0
    #             else y_hat_slices[:self.max_support_slices]
    #         )
    
    #         mean_support = torch.cat([latent_means] + support_slices, dim=1)
    #         print(f'mean_support stats (slice {slice_index}) - min:', mean_support.min().item(), 'max:', mean_support.max().item(), 'mean:', mean_support.mean().item())
    
    #         mean_support = self.atten_mean[slice_index](mean_support)
    #         print(f'atten_mean stats (slice {slice_index}) - min:', mean_support.min().item(), 'max:', mean_support.max().item(), 'mean:', mean_support.mean().item())
    
    #         mu = self.cc_mean_transforms[slice_index](mean_support)
    #         mu = mu[:, :, :y_shape[0], :y_shape[1]]
    #         print(f'mu stats (slice {slice_index}) - min:', mu.min().item(), 'max:', mu.max().item(), 'mean:', mu.mean().item())
    
    #         scale_support = torch.cat([latent_scales] + support_slices, dim=1)
    #         print(f'scale_support stats (slice {slice_index}) - min:', scale_support.min().item(), 'max:', scale_support.max().item(), 'mean:', scale_support.mean().item())
    
    #         scale_support = self.atten_scale[slice_index](scale_support)
    #         print(f'atten_scale stats (slice {slice_index}) - min:', scale_support.min().item(), 'max:', scale_support.max().item(), 'mean:', scale_support.mean().item())
    
    #         scale = self.cc_scale_transforms[slice_index](scale_support)
    #         scale = scale[:, :, :y_shape[0], :y_shape[1]]
    #         print(f'scale stats (slice {slice_index}) - min:', scale.min().item(), 'max:', scale.max().item(), 'mean:', scale.mean().item())
    
    #         index = self.gaussian_conditional.build_indexes(scale)
    #         print(f'index stats (slice {slice_index}) - min:', index.min().item(), 'max:', index.max().item(), 'mean:', index.float().mean().item())
    
    #         rv = decoder.decode_stream(
    #             index.reshape(-1).tolist(), cdf, cdf_lengths, offsets
    #         )
    #         print(f'rv stats (slice {slice_index}) - min:', min(rv), 'max:', max(rv), 'mean:', sum(rv)/len(rv))
    
    #         rv = torch.Tensor(rv).reshape(1, -1, y_shape[0], y_shape[1])
    #         print(f'rv reshaped stats (slice {slice_index}) - min:', rv.min().item(), 'max:', rv.max().item(), 'mean:', rv.mean().item())
    
    #         y_hat_slice = self.gaussian_conditional.dequantize(rv, mu)
    #         print(f'y_hat_slice after dequantization (slice {slice_index}) - min:', y_hat_slice.min().item(), 'max:', y_hat_slice.max().item(), 'mean:', y_hat_slice.mean().item())
    
    #         lrp_support = torch.cat([mean_support, y_hat_slice], dim=1)
    #         print(f'lrp_support stats (slice {slice_index}) - min:', lrp_support.min().item(), 'max:', lrp_support.max().item(), 'mean:', lrp_support.mean().item())
    
    #         lrp = self.lrp_transforms[slice_index](lrp_support)
    #         lrp = 0.5 * torch.tanh(lrp)
    #         print(f'lrp after tanh (slice {slice_index}) - min:', lrp.min().item(), 'max:', lrp.max().item(), 'mean:', lrp.mean().item())
    
    #         y_hat_slice += lrp
    #         print(f'y_hat_slice after adding lrp (slice {slice_index}) - min:', y_hat_slice.min().item(), 'max:', y_hat_slice.max().item(), 'mean:', y_hat_slice.mean().item())
    
    #         # Check for NaNs or Infs in y_hat_slice
    #         if torch.isnan(y_hat_slice).any():
    #             print(f'Warning: NaNs found in y_hat_slice at slice {slice_index}')
    #         if torch.isinf(y_hat_slice).any():
    #             print(f'Warning: Infs found in y_hat_slice at slice {slice_index}')
    
    #         y_hat_slices.append(y_hat_slice)
    
    #     y_hat = torch.cat(y_hat_slices, dim=1)
    #     print('Final y_hat stats - min:', y_hat.min().item(), 'max:', y_hat.max().item(), 'mean:', y_hat.mean().item())
    
    #     # Check for NaNs or Infs in y_hat before decoding
    #     if torch.isnan(y_hat).any():
    #         print('Warning: NaNs found in final y_hat')
    #     if torch.isinf(y_hat).any():
    #         print('Warning: Infs found in final y_hat')
    
    #     x_hat = self.g_s(y_hat).clamp_(0, 1)
    #     print('Final x_hat stats - min:', x_hat.min().item(), 'max:', x_hat.max().item(), 'mean:', x_hat.mean().item())
    
    #     # Check for NaNs or Infs in x_hat
    #     if torch.isnan(x_hat).any():
    #         print('Warning: NaNs found in x_hat')
    #     if torch.isinf(x_hat).any():
    #         print('Warning: Infs found in x_hat')
    
    #     return {"x_hat": x_hat}



    def decompress(self, strings, shape):
        z_hat = self.entropy_bottleneck.decompress(strings[1], shape)
        latent_scales = self.h_scale_s(z_hat)
        latent_means = self.h_mean_s(z_hat)

        y_shape = [z_hat.shape[2] * 4, z_hat.shape[3] * 4]

        y_string = strings[0][0]

        y_hat_slices = []
        cdf = self.gaussian_conditional.quantized_cdf.tolist()
        cdf_lengths = self.gaussian_conditional.cdf_length.reshape(-1).int().tolist()
        offsets = self.gaussian_conditional.offset.reshape(-1).int().tolist()
        self.decoder.set_stream(y_string)
        for slice_index in range(self.num_slices):
            support_slices = (y_hat_slices if self.max_support_slices < 0 else y_hat_slices[:self.max_support_slices])
            mean_support = torch.cat([latent_means] + support_slices, dim=1)
            mean_support = self.atten_mean[slice_index](mean_support)
            
            mu = self.cc_mean_transforms[slice_index](mean_support)
            mu = mu[:, :, :y_shape[0], :y_shape[1]]

            scale_support = torch.cat([latent_scales] + support_slices, dim=1)
            scale_support = self.atten_scale[slice_index](scale_support)
            
            scale = self.cc_scale_transforms[slice_index](scale_support)
            scale = scale[:, :, :y_shape[0], :y_shape[1]]


            index = self.gaussian_conditional.build_indexes(scale)
                
            rv = self.decoder.decode_stream(index.reshape(-1).tolist(), cdf, cdf_lengths, offsets)
            rv = torch.Tensor(rv).reshape(1, -1, y_shape[0], y_shape[1])
            # analyze_input(rv, 'rv')

            if slice_index>0:
                # analyze_input(torch.tensor(rv).detach())
                # visualize_outside_range(rv.detach(), -100, 100, 0, 0) 
                rv = replace_outside_range_with_average(rv, -100, 100)
                # visualize_outside_range(rv.detach(), -100, 100, 0, 0) 
            
            y_hat_slice = self.gaussian_conditional.dequantize(rv, mu)

            lrp_support = torch.cat([mean_support, y_hat_slice], dim=1)
            lrp = self.lrp_transforms[slice_index](lrp_support)
            lrp = 0.5 * torch.tanh(lrp)
            y_hat_slice += lrp

            y_hat_slices.append(y_hat_slice)
            # y_hat_slice = replace_outside_range_with_average(y_hat_slice, -100, 100)

        
        y_hat = torch.cat(y_hat_slices, dim=1)
        x_hat = self.g_s(y_hat).clamp_(0, 1)
        

        return {"x_hat": x_hat}

import matplotlib.pyplot as plt

def clamp_and_replace_with_neighbors(tensor, xmin, xmax):
    # Clone the tensor to avoid modifying the original
    tensor_clamped = tensor.clone()
    
    # Step 1: Clamp values to xmin and xmax
    tensor_clamped = torch.clamp(tensor_clamped, xmin, xmax)

    # Step 2: Replace clamped values (xmin or xmax) with the average of adjacent values
    # We will only focus on the spatial dimensions (3rd and 4th dimensions in the tensor)
    for batch in range(tensor_clamped.size(0)):
        for channel in range(tensor_clamped.size(1)):
            # Extract the 2D slice (spatial dimensions)
            data_2d = tensor_clamped[batch, channel, :, :]

            # Iterate through each spatial location
            for i in range(1, data_2d.size(0) - 1):  # Loop over height
                for j in range(1, data_2d.size(1) - 1):  # Loop over width
                    if data_2d[i, j] == xmin or data_2d[i, j] == xmax:
                        # Get 4-connected neighbors (up, down, left, right)
                        neighbors = [
                            data_2d[i-1, j],  # Up
                            data_2d[i+1, j],  # Down
                            data_2d[i, j-1],  # Left
                            data_2d[i, j+1]   # Right
                        ]
                        # Replace current value with the average of the neighbors
                        data_2d[i, j] = torch.mean(torch.tensor(neighbors))

            # Store the modified 2D slice back to the original tensor
            tensor_clamped[batch, channel, :, :] = data_2d

    return tensor_clamped
    
def replace_outside_range_with_average(tensor, xmin, xmax):
    """
    Replaces out-of-range values in each channel with the average of the in-range values for that channel.

    Parameters:
    - tensor (torch.Tensor): A 4D tensor of shape [batch, channels, height, width].
    - xmin (float): Minimum value of the acceptable range.
    - xmax (float): Maximum value of the acceptable range.

    Returns:
    - torch.Tensor: A new tensor with out-of-range values replaced.
    """
    # Ensure tensor has the correct dimensions
    assert tensor.dim() == 4, "Tensor must be 4D: [batch, channels, height, width]"
    batch_size, num_channels, height, width = tensor.shape

    # Create a copy of the tensor to avoid modifying the original tensor
    tensor_processed = tensor.clone()

    # Process each batch element
    for b in range(batch_size):
        # Process each channel
        for c in range(num_channels):
            # Extract the data for the current channel
            channel_data = tensor_processed[b, c, :, :]

            # Create mask for in-range values
            in_range_mask = (channel_data >= xmin) & (channel_data <= xmax)

            # Check if there are any in-range values
            num_in_range = in_range_mask.sum().item()

            if num_in_range > 0:
                # Compute average over in-range values
                average_value = channel_data[in_range_mask].mean()

                # Replace out-of-range values with the average
                channel_data[~in_range_mask] = average_value
            else:
                # If no in-range values, decide how to handle
                # Here, we'll set all values in the channel to zero and print a warning
                print(f"Warning: Batch {b}, Channel {c} has no in-range values. Setting out-of-range values to zero.")
                channel_data[~in_range_mask] = 0

    return tensor_processed

    
    

def visualize_outside_range(tensor, xmin, xmax, n=0, slice_number=0):
    # Ensure tensor has the correct dimensions
    assert len(tensor.shape) == 4, "Tensor must be 4D: [batch, channels, height, width]"
    batch_size, num_channels, height, width = tensor.shape
    assert batch_size > 0, "Tensor must have at least one batch"
    assert slice_number < batch_size, f"slice_number {slice_number} exceeds batch size {batch_size}"
    
    # Extract the data for the specified slice (batch)
    data = tensor[slice_number].cpu()
    
    # Create a mask for values outside the range [xmin, xmax] across all channels
    outside_range_mask = (data < xmin) | (data > xmax)  # Shape: [channels, height, width]
    
    # Determine which channels have any values outside the range
    anomalous_channels_mask = outside_range_mask.any(dim=(1, 2))  # Shape: [channels]
    anomalous_indices = anomalous_channels_mask.nonzero(as_tuple=False).squeeze()
    
    num_anomalous = anomalous_channels_mask.sum().item()
    percentage = 100.0 * num_anomalous / num_channels
    print(f"Percentage of channels with values outside [{xmin}, {xmax}]: {percentage:.2f}%")
    
    if num_anomalous == 0:
        print("No channels have values outside the specified range.")
        return
    
    assert n < num_anomalous, f"n={n} exceeds the number of anomalous channels {num_anomalous - 1}"
    
    # Get the index of the n-th anomalous channel
    channel_idx = anomalous_indices[n].item() if num_anomalous > 1 else anomalous_indices.item()
    
    # Extract the data for this channel
    channel_data = data[channel_idx].numpy()
    
    # Create masks
    in_range_mask = (channel_data >= xmin) & (channel_data <= xmax)
    out_of_range_mask = ~in_range_mask
    
    # Prepare in-range data (mask out-of-range values)
    in_range_data = np.ma.masked_where(out_of_range_mask, channel_data)
    
    # Prepare out-of-range data (mask in-range values)
    out_of_range_data = np.ma.masked_where(in_range_mask, channel_data)
    
    # Plot the in-range data without a colorbar
    plt.figure(figsize=(6, 6))
    cmap_in_range = plt.cm.gray.copy()
    cmap_in_range.set_bad(color='black')  # Set masked (out-of-range) values to black
    plt.imshow(in_range_data, cmap=cmap_in_range, interpolation='none')
    plt.title(f"Channel {channel_idx} - In-range values with anomalies highlighted")
    
    # Overlay the out-of-range data
    cmap_out_of_range = plt.cm.autumn
    out_of_range_im = plt.imshow(out_of_range_data, cmap=cmap_out_of_range, interpolation='none', alpha=0.8)
    
    # Add a colorbar for the out-of-range data
    cbar = plt.colorbar(out_of_range_im, label='Out-of-range values', fraction=0.046, pad=0.04)
    
    plt.show()



import torch

def replace_out_of_range_with_adjacent_average(x, xmin, xmax):
    '''
    Replaces out-of-range values in a tensor with the average of their spatially adjacent values.

    Parameters:
    x (torch.Tensor): Input tensor of shape [batch, channel, h, w].
    xmin (float): Minimum allowable value.
    xmax (float): Maximum allowable value.

    Returns:
    torch.Tensor: Tensor with out-of-range values replaced.
    '''
    # Create a mask for out-of-range values
    mask = (x < xmin) | (x > xmax)

    # Initialize sum and count of adjacent elements
    adj_sum = torch.zeros_like(x)
    adj_count = torch.zeros_like(x)

    # Up shift (shifted down in the array)
    x_up = x[:, :, 1:, :]
    adj_sum[:, :, :-1, :] += x_up
    adj_count[:, :, :-1, :] += 1

    # Down shift (shifted up in the array)
    x_down = x[:, :, :-1, :]
    adj_sum[:, :, 1:, :] += x_down
    adj_count[:, :, 1:, :] += 1

    # Left shift
    x_left = x[:, :, :, 1:]
    adj_sum[:, :, :, :-1] += x_left
    adj_count[:, :, :, :-1] += 1

    # Right shift
    x_right = x[:, :, :, :-1]
    adj_sum[:, :, :, 1:] += x_right
    adj_count[:, :, :, 1:] += 1

    # Avoid division by zero
    adj_count_zero = adj_count == 0
    adj_count[adj_count_zero] = 1  # To prevent division by zero
    adj_avg = adj_sum / adj_count

    # For positions where adj_count was zero, retain original values
    adj_avg[adj_count_zero] = x[adj_count_zero]

    # Replace out-of-range elements with the average of adjacent values
    x_new = x.clone()
    x_new[mask] = adj_avg[mask]

    return x_new




# class SequentialWithLambda(nn.Sequential):
#     def forward(self, x, lambda_value):
#         for module in self:
#             # Pass both x and lambda_value to layers that need it (e.g., ResidualBlockWithLambdaFiLM)
#             if isinstance(module, ResidualBlockWithLambdaFiLM):
#                 x = module(x, lambda_value)
#             else:
#                 # Pass only x to other layers (e.g., m_down1, m_down2)
#                 x = module(x)
#         return x





# class TCM_conditional(CompressionModel):
#     def __init__(self, config=[2, 2, 2, 2, 2, 2], head_dim=[8, 16, 32, 32, 16, 8], drop_path_rate=0, N=128,  M=320, num_slices=5, max_support_slices=5, **kwargs):
#         super().__init__(entropy_bottleneck_channels=N)
#         self.config = config
#         self.head_dim = head_dim
#         self.window_size = 8
#         self.num_slices = num_slices
#         self.max_support_slices = max_support_slices
#         dim = N
#         self.M = M
#         dpr = [x.item() for x in torch.linspace(0, drop_path_rate, sum(config))]
#         begin = 0

#         self.m_down1 = [ConvTransBlock(dim, dim, self.head_dim[0], self.window_size, dpr[i+begin], 'W' if not i%2 else 'SW') 
#                       for i in range(config[0])] + \
#                       [ResidualBlockWithStride(2*N, 2*N, stride=2)]
#         self.m_down2 = [ConvTransBlock(dim, dim, self.head_dim[1], self.window_size, dpr[i+begin], 'W' if not i%2 else 'SW')
#                       for i in range(config[1])] + \
#                       [ResidualBlockWithStride(2*N, 2*N, stride=2)]
#         self.m_down3 = [ConvTransBlock(dim, dim, self.head_dim[2], self.window_size, dpr[i+begin], 'W' if not i%2 else 'SW')
#                       for i in range(config[2])] + \
#                       [conv3x3(2*N, M, stride=2)]

#         self.m_up1 = [ConvTransBlock(dim, dim, self.head_dim[3], self.window_size, dpr[i+begin], 'W' if not i%2 else 'SW') 
#                       for i in range(config[3])] + \
#                       [ResidualBlockUpsample(2*N, 2*N, 2)]
#         self.m_up2 = [ConvTransBlock(dim, dim, self.head_dim[4], self.window_size, dpr[i+begin], 'W' if not i%2 else 'SW') 
#                       for i in range(config[4])] + \
#                       [ResidualBlockUpsample(2*N, 2*N, 2)]
#         self.m_up3 = [ConvTransBlock(dim, dim, self.head_dim[5], self.window_size, dpr[i+begin], 'W' if not i%2 else 'SW') 
#                       for i in range(config[5])] + \
#                       [subpel_conv3x3(2*N, 3, 2)]
        
#         # self.g_a = nn.Sequential(*[ResidualBlockWithLambdaFiLM(3, 2 * N, 2)] + self.m_down1 + self.m_down2 + self.m_down3)
#         # self.g_a = nn.Sequential(*[ResidualBlockWithLambdaFiLM(3, 2 * N, 2)] + self.m_down1 + self.m_down2 + self.m_down3)
#         self.g_a = SequentialWithLambda(
#     *[ResidualBlockWithLambdaFiLM(3, 2 * N, 2)] + self.m_down1 + self.m_down2 + self.m_down3
# )



#         self.g_s = nn.Sequential(*[ResidualBlockUpsample(M, 2*N, 2)] + self.m_up1 + self.m_up2 + self.m_up3)

#         self.ha_down1 = [ConvTransBlock(N, N, 32, 4, 0, 'W' if not i%2 else 'SW') 
#                       for i in range(config[0])] + \
#                       [conv3x3(2*N, 192, stride=2)]

#         self.h_a = nn.Sequential(
#             *[ResidualBlockWithStride(320, 2*N, 2)] + \
#             self.ha_down1
#         )

#         self.hs_up1 = [ConvTransBlock(N, N, 32, 4, 0, 'W' if not i%2 else 'SW') 
#                       for i in range(config[3])] + \
#                       [subpel_conv3x3(2*N, 320, 2)]

#         self.h_mean_s = nn.Sequential(
#             *[ResidualBlockUpsample(192, 2*N, 2)] + \
#             self.hs_up1
#         )

#         self.hs_up2 = [ConvTransBlock(N, N, 32, 4, 0, 'W' if not i%2 else 'SW') 
#                       for i in range(config[3])] + \
#                       [subpel_conv3x3(2*N, 320, 2)]


#         self.h_scale_s = nn.Sequential(
#             *[ResidualBlockUpsample(192, 2*N, 2)] + \
#             self.hs_up2
#         )


#         self.atten_mean = nn.ModuleList(
#             nn.Sequential(
#                 SWAtten((320 + (320//self.num_slices)*min(i, 5)), (320 + (320//self.num_slices)*min(i, 5)), 16, self.window_size,0, inter_dim=128)
#             ) for i in range(self.num_slices)
#             )
#         self.atten_scale = nn.ModuleList(
#             nn.Sequential(
#                 SWAtten((320 + (320//self.num_slices)*min(i, 5)), (320 + (320//self.num_slices)*min(i, 5)), 16, self.window_size,0, inter_dim=128)
#             ) for i in range(self.num_slices)
#             )
#         self.cc_mean_transforms = nn.ModuleList(
#             nn.Sequential(
#                 conv(320 + (320//self.num_slices)*min(i, 5), 224, stride=1, kernel_size=3),
#                 nn.GELU(),
#                 conv(224, 128, stride=1, kernel_size=3),
#                 nn.GELU(),
#                 conv(128, (320//self.num_slices), stride=1, kernel_size=3),
#             ) for i in range(self.num_slices)
#         )
#         self.cc_scale_transforms = nn.ModuleList(
#             nn.Sequential(
#                 conv(320 + (320//self.num_slices)*min(i, 5), 224, stride=1, kernel_size=3),
#                 nn.GELU(),
#                 conv(224, 128, stride=1, kernel_size=3),
#                 nn.GELU(),
#                 conv(128, (320//self.num_slices), stride=1, kernel_size=3),
#             ) for i in range(self.num_slices)
#             )

#         self.lrp_transforms = nn.ModuleList(
#             nn.Sequential(
#                 conv(320 + (320//self.num_slices)*min(i+1, 6), 224, stride=1, kernel_size=3),
#                 nn.GELU(),
#                 conv(224, 128, stride=1, kernel_size=3),
#                 nn.GELU(),
#                 conv(128, (320//self.num_slices), stride=1, kernel_size=3),
#             ) for i in range(self.num_slices)
#         )

#         self.entropy_bottleneck = EntropyBottleneck(192)
#         self.gaussian_conditional = GaussianConditional(None)

#     def update(self, scale_table=None, force=False):
#         if scale_table is None:
#             scale_table = get_scale_table()
#         updated = self.gaussian_conditional.update_scale_table(scale_table, force=force)
#         updated |= super().update(force=force)
#         return updated
    
#     def forward(self, x, lambda_value):
#         y = self.g_a(x, lambda_value)
#         y_shape = y.shape[2:]
#         z = self.h_a(y)
#         _, z_likelihoods = self.entropy_bottleneck(z)

#         z_offset = self.entropy_bottleneck._get_medians()
#         z_tmp = z - z_offset
#         z_hat = ste_round(z_tmp) + z_offset

#         latent_scales = self.h_scale_s(z_hat)
#         latent_means = self.h_mean_s(z_hat)

#         y_slices = y.chunk(self.num_slices, 1)
#         y_hat_slices = []
#         y_likelihood = []
#         mu_list = []
#         scale_list = []
#         for slice_index, y_slice in enumerate(y_slices):
#             support_slices = (y_hat_slices if self.max_support_slices < 0 else y_hat_slices[:self.max_support_slices])
#             mean_support = torch.cat([latent_means] + support_slices, dim=1)
#             mean_support = self.atten_mean[slice_index](mean_support)
#             mu = self.cc_mean_transforms[slice_index](mean_support)
#             mu = mu[:, :, :y_shape[0], :y_shape[1]]
#             mu_list.append(mu)
#             scale_support = torch.cat([latent_scales] + support_slices, dim=1)
#             scale_support = self.atten_scale[slice_index](scale_support)
#             scale = self.cc_scale_transforms[slice_index](scale_support)
#             scale = scale[:, :, :y_shape[0], :y_shape[1]]
#             scale_list.append(scale)
#             _, y_slice_likelihood = self.gaussian_conditional(y_slice, scale, mu)
#             y_likelihood.append(y_slice_likelihood)
#             y_hat_slice = ste_round(y_slice - mu) + mu
#             # if self.training:
#             #     lrp_support = torch.cat([mean_support + torch.randn(mean_support.size()).cuda().mul(scale_support), y_hat_slice], dim=1)
#             # else:
#             lrp_support = torch.cat([mean_support, y_hat_slice], dim=1)
#             lrp = self.lrp_transforms[slice_index](lrp_support)
#             lrp = 0.5 * torch.tanh(lrp)
#             y_hat_slice += lrp

#             y_hat_slices.append(y_hat_slice)

#         y_hat = torch.cat(y_hat_slices, dim=1)
#         means = torch.cat(mu_list, dim=1)
#         scales = torch.cat(scale_list, dim=1)
#         y_likelihoods = torch.cat(y_likelihood, dim=1)
#         x_hat = self.g_s(y_hat)

#         return {
#             "x_hat": x_hat,
#             "likelihoods": {"y": y_likelihoods, "z": z_likelihoods},
#             "para":{"means": means, "scales":scales, "y":y}
#         }

#     def load_state_dict(self, state_dict):
#         update_registered_buffers(
#             self.gaussian_conditional,
#             "gaussian_conditional",
#             ["_quantized_cdf", "_offset", "_cdf_length", "scale_table"],
#             state_dict,
#         )
#         super().load_state_dict(state_dict)

#     @classmethod
#     def from_state_dict(cls, state_dict):
#         """Return a new model instance from `state_dict`."""
#         N = state_dict["g_a.0.weight"].size(0)
#         M = state_dict["g_a.6.weight"].size(0)
#         # net = cls(N, M)
#         net = cls(N, M)
#         net.load_state_dict(state_dict)
#         return net

#     def compress(self, x, lambda_value):
#         y = self.g_a(x, lambda_value)
#         y_shape = y.shape[2:]

#         z = self.h_a(y)
#         z_strings = self.entropy_bottleneck.compress(z)
#         z_hat = self.entropy_bottleneck.decompress(z_strings, z.size()[-2:])

#         latent_scales = self.h_scale_s(z_hat)
#         latent_means = self.h_mean_s(z_hat)

#         y_slices = y.chunk(self.num_slices, 1)
#         y_hat_slices = []
#         y_scales = []
#         y_means = []

#         cdf = self.gaussian_conditional.quantized_cdf.tolist()
#         cdf_lengths = self.gaussian_conditional.cdf_length.reshape(-1).int().tolist()
#         offsets = self.gaussian_conditional.offset.reshape(-1).int().tolist()

#         encoder = BufferedRansEncoder()
#         symbols_list = []
#         indexes_list = []
#         y_strings = []

#         for slice_index, y_slice in enumerate(y_slices):
#             support_slices = (y_hat_slices if self.max_support_slices < 0 else y_hat_slices[:self.max_support_slices])

#             mean_support = torch.cat([latent_means] + support_slices, dim=1)
#             mean_support = self.atten_mean[slice_index](mean_support)
#             mu = self.cc_mean_transforms[slice_index](mean_support)
#             mu = mu[:, :, :y_shape[0], :y_shape[1]]

#             scale_support = torch.cat([latent_scales] + support_slices, dim=1)
#             scale_support = self.atten_scale[slice_index](scale_support)
#             scale = self.cc_scale_transforms[slice_index](scale_support)
#             scale = scale[:, :, :y_shape[0], :y_shape[1]]

#             index = self.gaussian_conditional.build_indexes(scale)
#             y_q_slice = self.gaussian_conditional.quantize(y_slice, "symbols", mu)
#             y_hat_slice = y_q_slice + mu

#             symbols_list.extend(y_q_slice.reshape(-1).tolist())
#             indexes_list.extend(index.reshape(-1).tolist())


#             lrp_support = torch.cat([mean_support, y_hat_slice], dim=1)
#             lrp = self.lrp_transforms[slice_index](lrp_support)
#             lrp = 0.5 * torch.tanh(lrp)
#             y_hat_slice += lrp

#             y_hat_slices.append(y_hat_slice)
#             y_scales.append(scale)
#             y_means.append(mu)

#         encoder.encode_with_indexes(symbols_list, indexes_list, cdf, cdf_lengths, offsets)
#         y_string = encoder.flush()
#         y_strings.append(y_string)

#         return {"strings": [y_strings, z_strings], "shape": z.size()[-2:]}

#     def _likelihood(self, inputs, scales, means=None):
#         half = float(0.5)
#         if means is not None:
#             values = inputs - means
#         else:
#             values = inputs

#         scales = torch.max(scales, torch.tensor(0.11))
#         values = torch.abs(values)
#         upper = self._standardized_cumulative((half - values) / scales)
#         lower = self._standardized_cumulative((-half - values) / scales)
#         likelihood = upper - lower
#         return likelihood

#     def _standardized_cumulative(self, inputs):
#         half = float(0.5)
#         const = float(-(2 ** -0.5))
#         # Using the complementary error function maximizes numerical precision.
#         return half * torch.erfc(const * inputs)

#     def decompress(self, strings, shape):
#         z_hat = self.entropy_bottleneck.decompress(strings[1], shape)
#         latent_scales = self.h_scale_s(z_hat)
#         latent_means = self.h_mean_s(z_hat)

#         y_shape = [z_hat.shape[2] * 4, z_hat.shape[3] * 4]

#         y_string = strings[0][0]

#         y_hat_slices = []
#         cdf = self.gaussian_conditional.quantized_cdf.tolist()
#         cdf_lengths = self.gaussian_conditional.cdf_length.reshape(-1).int().tolist()
#         offsets = self.gaussian_conditional.offset.reshape(-1).int().tolist()

#         decoder = RansDecoder()
#         decoder.set_stream(y_string)

#         for slice_index in range(self.num_slices):
#             support_slices = (y_hat_slices if self.max_support_slices < 0 else y_hat_slices[:self.max_support_slices])
#             mean_support = torch.cat([latent_means] + support_slices, dim=1)
#             mean_support = self.atten_mean[slice_index](mean_support)
#             mu = self.cc_mean_transforms[slice_index](mean_support)
#             mu = mu[:, :, :y_shape[0], :y_shape[1]]

#             scale_support = torch.cat([latent_scales] + support_slices, dim=1)
#             scale_support = self.atten_scale[slice_index](scale_support)
#             scale = self.cc_scale_transforms[slice_index](scale_support)
#             scale = scale[:, :, :y_shape[0], :y_shape[1]]

#             index = self.gaussian_conditional.build_indexes(scale)

#             rv = decoder.decode_stream(index.reshape(-1).tolist(), cdf, cdf_lengths, offsets)
#             rv = torch.Tensor(rv).reshape(1, -1, y_shape[0], y_shape[1])
#             y_hat_slice = self.gaussian_conditional.dequantize(rv, mu)

#             lrp_support = torch.cat([mean_support, y_hat_slice], dim=1)
#             lrp = self.lrp_transforms[slice_index](lrp_support)
#             lrp = 0.5 * torch.tanh(lrp)
#             y_hat_slice += lrp

#             y_hat_slices.append(y_hat_slice)

#         y_hat = torch.cat(y_hat_slices, dim=1)
#         x_hat = self.g_s(y_hat).clamp_(0, 1)

#         return {"x_hat": x_hat}
